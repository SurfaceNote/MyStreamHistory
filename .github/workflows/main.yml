name: Auto deploy API and Web

on:
  push:
    branches:
      - main

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      api_changed: ${{ steps.filter.outputs.api }}
      web_changed: ${{ steps.filter.outputs.web }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Check changed files
        id: filter
        run: |
          API_CHANGED=$(git diff --name-only HEAD^ HEAD | grep -q '^MyStreamHistory.API/' && echo "true" || echo "false")
          WEB_CHANGED=$(git diff --name-only HEAD^ HEAD | grep -q '^MyStreamHistory.Web/' && echo "true" || echo "false")

          echo "api=$API_CHANGED" >> $GITHUB_OUTPUT
          echo "web=$WEB_CHANGED" >> $GITHUB_OUTPUT
  deploy-api:
    needs: detect-changes
    if: needs.detect-changes.outputs.api_changed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy API to server
        run: |
          rsync -avz --delete ./MyStreamHistory.API/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.DEPLOY_PATH }}/MyStreamHistory.API/
          rsync -avz --delete ./docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.DEPLOY_PATH }}/

      - name: Restart API on server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          cd ${{ secrets.DEPLOY_PATH }}
          docker-compose pull
          docker-compose down
          docker-compose up -d --build
          docker-compose exec mystreamhistory.api dotnet ef database update
          docker ps
          EOF

      - name: Wait for API to be healthy
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          end=$(( $(date +%s) + 60 ))  # Устанавливаем время окончания через 60 секунд
          while [ $(date +%s) -lt $end ]; do
            if curl -s http://localhost:5000/health; then
              echo "API is up and running!"
              exit 0
            else
              echo "Waiting for API to be healthy..."
              sleep 5
            fi
          done
          echo "Error: API did not become healthy in time!"
          exit 1
          EOF

      - name: Finish deployment
        run: |
          echo "Deployment finished successfully!"
  deploy-web:
    needs: detect-changes
    if: needs.detect-changes.outputs.web_changed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST_WEB }} >> ~/.ssh/known_hosts

      - name: Deploy Web to server
        run: |
          rsync -avz --delete ./MyStreamHistory.Web/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST_WEB }}:${{ secrets.DEPLOY_PATH }}/MyStreamHistory.Web/

      - name: Restart Web on server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST_WEB }} << 'EOF'
          cd ${{ secrets.DEPLOY_PATH }}/MyStreamHistory.Web
          docker-compose down
          docker-compose run --rm certbot renew
          docker-compose up -d --build
          docker ps
          EOF

      - name: Wait for Web to be healthy
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST_WEB }} << 'EOF'
          end=$(( $(date +%s) + 60 ))
          while [ $(date +%s) -lt $end ]; do
            if curl -s http://localhost/ | grep "MyStreamHistory"; then
              echo "Web is up and running!"
              exit 0
            else
              echo "Waiting for Web to be healthy..."
              sleep 5
            fi
          done
          echo "Error: Web did not become healthy in time!"
          exit 1
          EOF

      - name: Finish Web deployment
        run: echo "Web deployment finished successfully!"
